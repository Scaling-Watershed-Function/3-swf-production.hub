lnd <- as_tibble(lnd_o)
my_colors <- c("#F564E3","#00BA38","#B79F00","#F8766D","#619CFF")
lnd <- rename(lnd,
comid = COMID,
urbn = urban,
frst = forest,
wtnd = wetland,
shrb = shrub,
urbn_t = turban,
frst_t = tforest,
wtnd_t = twetland,
agrc_t = tagrc,
shrb_t = tshrub)
lnd <- lnd %>% group_by(comid) %>%
mutate(tot_loc = round(urbn + frst + wtnd + agrc + shrb,2)) %>%
mutate(tot_acm = round(urbn_t + frst_t + wtnd_t + agrc_t + shrb_t,2))
summary(lnd$tot_loc)
summary(lnd$tot_acm)
lnd %>% select(tot_loc,tot_acm) %>%
gather(key = "area.type", value = "cover", c(2:3),factor_key = TRUE) %>%
ggplot(aes(area.type,cover,color = area.type))+
geom_hline(yintercept = 75)+
geom_boxplot()
lnd %>% select(comid,tot_loc,tot_acm) %>%
gather(key = "area.type", value = "cover", c(2:3),factor_key = TRUE) %>%
ggplot(aes(area.type,cover,color = area.type))+
geom_hline(yintercept = 75)+
geom_boxplot()
lndf <- filter(lnd,tot_loc > 74.99 & tot_acm >74.99) # We have dropped 806 data points (~12% of the original data set)
lndf %>% select(tot_loc,tot_acm) %>%
gather(key = "area.type", value = "cover", c(2:3),factor_key = TRUE) %>%
ggplot(aes(area.type,cover,color = area.type))+
geom_hline(yintercept = 75)+
geom_boxplot()
lndf %>% select(comid,tot_loc,tot_acm) %>%
gather(key = "area.type", value = "cover", c(2:3),factor_key = TRUE) %>%
ggplot(aes(area.type,cover,color = area.type))+
geom_hline(yintercept = 75)+
geom_boxplot()
lndf <- lndf %>%
mutate(agrc = if_else(tot_loc!=100.00,agrc*(100/tot_loc),agrc)) %>%
mutate(frst = if_else(tot_loc!=100.00,frst*(100/tot_loc),frst)) %>%
mutate(shrb = if_else(tot_loc!=100.00,shrb*(100/tot_loc),shrb)) %>%
mutate(urbn = if_else(tot_loc!=100.00,urbn*(100/tot_loc),urbn)) %>%
mutate(wtnd = if_else(tot_loc!=100.00,wtnd*(100/tot_loc),wtnd)) %>%
mutate(tot_loc = if_else(tot_loc!=100.00,agrc+frst+shrb+urbn+wtnd,tot_loc)) %>%
mutate(agrc_t = if_else(tot_acm!=100.00,agrc_t*(100/tot_acm),agrc_t)) %>%
mutate(frst_t = if_else(tot_acm!=100.00,frst_t*(100/tot_acm),frst_t)) %>%
mutate(shrb_t = if_else(tot_acm!=100.00,shrb_t*(100/tot_acm),shrb_t)) %>%
mutate(urbn_t = if_else(tot_acm!=100.00,urbn_t*(100/tot_acm),urbn_t)) %>%
mutate(wtnd_t = if_else(tot_acm!=100.00,wtnd_t*(100/tot_acm),wtnd_t)) %>%
mutate(tot_acm = if_else(tot_acm!=100.00,agrc_t+frst_t+shrb_t+urbn_t+wtnd_t,tot_acm))
# Making row-wise operations (https://dplyr.tidyverse.org/articles/rowwise.html)
lndf <- lndf %>% rowwise() %>%
mutate(hl = entropy(c(agrc,
frst,
shrb,
urbn,
wtnd),unit = "log")) %>%
mutate(hrl = hl/log(5)) %>%
mutate(ht = entropy(c(agrc_t,
frst_t,
shrb_t,
urbn_t,
wtnd_t),unit = "log")) %>%
mutate(hrt = ht/log(5))
p4 <- ggplot(lndf,aes(hrl,hrt))+
geom_point()
p4
# Local dataset
lnd_el <- select(lndf,
comid,
agrc,
frst,
shrb,
urbn,
wtnd)
ncols = 4
nrows = 5
ssz = 600
ic_loc <- matrix(1:nrows,nrows,ncols,
dimnames = list(c("Agriculture","Forests","Shrublands","Urban","Wetlands"),
c("Yjn_l","Hn_l","Hmaxn_l", "In_l")))
ag_list <- list()
fr_list <- list()
sr_list <- list()
ub_list <- list()
wt_list <- list()
# Number of iterations
itn = 1000
for(i in 1:itn){
if (i == itn +1){
break
}
loc_im <- lnd_el[sample(nrow(lnd_el),size=ssz,replace = FALSE),]
iml <- loc_im[,c(2:ncol(loc_im))]/sum(loc_im[,c(2:ncol(loc_im))])
for(j in 1:ncol(iml)){
yjn = sum(iml[,j])
hn = entropy(iml[,j], unit = "log")
hmaxn = log(nrow(iml))
ic_loc[j,1]=yjn
ic_loc[j,2]=hn
ic_loc[j,3]=hmaxn
ic_loc[j,4]=yjn%*%(hmaxn-hn)
}
ag_list[[i]] <- ic_loc[1,]
fr_list[[i]] <- ic_loc[2,]
sr_list[[i]] <- ic_loc[3,]
ub_list[[i]] <- ic_loc[4,]
wt_list[[i]] <- ic_loc[5,]
}
ag_l = as_tibble(do.call("rbind",ag_list))
ag_l <- ag_l %>% mutate(use="Agriculture")
fr_l = as_tibble(do.call("rbind",fr_list))
fr_l <- fr_l %>% mutate(use = "Forests")
sr_l = as_tibble(do.call("rbind",sr_list))
sr_l <- sr_l %>% mutate(use = "Shurblands")
ub_l = as_tibble(do.call("rbind",ub_list))
ub_l <- ub_l %>% mutate(use = "Urban")
wt_l = as_tibble(do.call("rbind",wt_list))
wt_l <- wt_l %>% mutate(use = "Wetlands")
local_im <- rbind(ag_l,fr_l,sr_l,ub_l,wt_l)
# Let's check the results with a box-plot
p5 <- ggplot(local_im,aes(x = reorder(use,-In_l), y = In_l, fill = use, color = use))+
geom_boxplot(alpha = 0.5)+
scale_color_manual(values = my_colors)+
scale_fill_manual(values = my_colors)+
labs(x="Land use",y ="Information Contribution")+
theme(legend.position = "none")
p5
# Watershed Scale
# Watershed data set
lnd_et <- select(lndf,
comid,
agrc_t,
frst_t,
shrb_t,
urbn_t,
wtnd_t)
# Creating a matrix for results
ncols = 4
nrows = 5
ssz = 600
ic_tot <- matrix(1:nrows,nrows,ncols,
dimnames = list(c("Agriculture","Forests","Shrublands","Urban","Wetlands"),
c("Yjn_l","Hn_l","Hmaxn_l", "In_l")))
agt_list <- list()
frt_list <- list()
srt_list <- list()
ubt_list <- list()
wtt_list <- list()
# Number of iterations
itn = 1000
for(i in 1:itn){
if (i == itn +1){
break
}
tot_im <- lnd_et[sample(nrow(lnd_et),size=ssz,replace = FALSE),]
imt <- tot_im[,c(2:ncol(tot_im))]/sum(tot_im[,c(2:ncol(tot_im))])
for(j in 1:ncol(imt)){
yjn = sum(imt[,j])
hn = entropy(imt[,j], unit = "log")
hmaxn = log(nrow(imt))
ic_tot[j,1]=yjn
ic_tot[j,2]=hn
ic_tot[j,3]=hmaxn
ic_tot[j,4]=yjn%*%(hmaxn-hn)
}
agt_list[[i]] <- ic_tot[1,]
frt_list[[i]] <- ic_tot[2,]
srt_list[[i]] <- ic_tot[3,]
ubt_list[[i]] <- ic_tot[4,]
wtt_list[[i]] <- ic_tot[5,]
}
agt_l = as_tibble(do.call("rbind",agt_list))
agt_l <- agt_l %>% mutate(use="Agriculture")
frt_l = as_tibble(do.call("rbind",frt_list))
frt_l <- frt_l %>% mutate(use = "Forests")
srt_l = as_tibble(do.call("rbind",srt_list))
srt_l <- srt_l %>% mutate(use = "Shurblands")
ubt_l = as_tibble(do.call("rbind",ubt_list))
ubt_l <- ubt_l %>% mutate(use = "Urban")
wtt_l = as_tibble(do.call("rbind",wtt_list))
wtt_l <- wtt_l %>% mutate(use = "Wetlands")
wshd_im <- rbind(agt_l,frt_l,srt_l,ubt_l,wtt_l)
p6 <- ggplot(wshd_im,aes(x = reorder(use,-In_l), y = In_l, fill = use, color = use))+
geom_boxplot(alpha = 0.5)+
scale_color_manual(values = my_colors)+
scale_fill_manual(values = my_colors)+
xlab("Land Use")+
ylab("Contribution to landscape heterogeneity\n(as Shannon's entropy)")+
theme(legend.position = "none")
p6
lnd_m0 <- select(lndf,
comid,
agrc,
frst,
shrb,
urbn,
wtnd,
agrc_t,
frst_t,
shrb_t,
urbn_t,
wtnd_t)
lnd_m0 <- lnd_m0 %>% group_by(comid) %>%
mutate(p_ant = agrc + urbn) %>%
mutate(p_frt = frst + wtnd) %>%
mutate(p_shb = shrb) %>%
mutate(p_ant_t = agrc_t + urbn_t) %>%
mutate(p_frt_t = frst_t + wtnd_t) %>%
mutate(p_shb_t = shrb_t)
lnd_m <- lnd_m0 %>% rowwise() %>%
mutate(hl = entropy(c(p_ant,
p_frt,
p_shb),unit = "log")) %>%
mutate(hrl = hl/log(3)) %>%
mutate(ht = entropy(c(p_ant_t,
p_frt_t,
p_shb_t),unit = "log")) %>%
mutate(hrt = ht/log(3))
bgc_lnd0 <- merge(lnd_m, dat_o, by = "comid") # There are duplicates comid's in both
#datasets, to filter those out:
bgc_lnd <- bgc_lnd0
###############################################################################
# Scaling Analysis for Respiration Rates across the Yakima River Basin
# FIGURES
###############################################################################
#By : Francisco Guerrero
#Data source: SWAT-NEXXS Model simulations (By Kyongho Son)
# SETTINGS
# Loading packages:
# Run for the first time only
# install.packages(librarian)
# To run this code in macos it is necessary to install XQuartz from
#www.xquartz.org
# Also, you may need to install the GIT credential manager following the instructions
# from: https://github.com/GitCredentialManager/git-credential-manager/blob/main/README.md
rm()
librarian::shelf(tidyverse,# for plotting
plot3D,# for 3D plots
plot3Drgl,# for interactive 3D plots
rgl,# required by plot3Drgl
entropy,#Information theory calculations
GGally,#pair plots
scales,# manipulating log scales
stringr,# editing text
Hmisc,# Harrell's miscellaneaous for stats
gtable)# To manipulate ggplot objects
theme_httn<-  theme(axis.text=element_text(colour="black",size=22),
axis.title = element_text(size = 32, face = "bold"),
panel.grid.minor= element_line(colour = "gray", linetype = "dotted"),
panel.grid.major = element_line(colour = "gray", linetype = "dashed"),
panel.border = element_rect(fill=NA, colour = "black", linewidth = 1.5),
panel.background=element_rect(fill="white"),
axis.ticks.length = unit(0.254, "cm"),
axis.ticks = element_line(colour = "black", linewidth = 1),
axis.line = element_line(colour = "black"),
legend.position = c(0.85,0.25),
legend.direction = "vertical",
legend.background = element_blank(),
legend.key.size = unit(1.0, 'lines'),#Changing spacing between legend keys
legend.title = element_text())
set.seed(2703)
#Data:
#values
bgc_cln0 <- read.csv("assets/data/230123_scaling_lnd_bgc.csv",
stringsAsFactors=TRUE)
bgc_cln0 <- bgc_cln0[,2:ncol(bgc_cln0)]
summary(bgc_cln0)
# Random forests filled data
rff_bgc <- filter(bgc_cln0,hz_exchng == "NA")
# Random forests filled data
rff_bgc <- filter(bgc_cln0,is.na(hz_exchng)=TRUE)
# Random forests filled data
rff_bgc <- filter(bgc_cln0,is.na(hz_exchng)==TRUE)
###############################################################################
# Scaling Analysis for Respiration Rates across the Yakima River Basin
# FIGURES
###############################################################################
#By : Francisco Guerrero
#Data source: SWAT-NEXXS Model simulations (By Kyongho Son)
# SETTINGS
# Loading packages:
# Run for the first time only
# install.packages(librarian)
# To run this code in macos it is necessary to install XQuartz from
#www.xquartz.org
# Also, you may need to install the GIT credential manager following the instructions
# from: https://github.com/GitCredentialManager/git-credential-manager/blob/main/README.md
rm()
librarian::shelf(tidyverse,# for plotting
plot3D,# for 3D plots
plot3Drgl,# for interactive 3D plots
rgl,# required by plot3Drgl
entropy,#Information theory calculations
GGally,#pair plots
scales,# manipulating log scales
stringr,# editing text
Hmisc,# Harrell's miscellaneaous for stats
gtable)# To manipulate ggplot objects
theme_httn<-  theme(axis.text=element_text(colour="black",size=22),
axis.title = element_text(size = 32, face = "bold"),
panel.grid.minor= element_line(colour = "gray", linetype = "dotted"),
panel.grid.major = element_line(colour = "gray", linetype = "dashed"),
panel.border = element_rect(fill=NA, colour = "black", linewidth = 1.5),
panel.background=element_rect(fill="white"),
axis.ticks.length = unit(0.254, "cm"),
axis.ticks = element_line(colour = "black", linewidth = 1),
axis.line = element_line(colour = "black"),
legend.position = c(0.85,0.25),
legend.direction = "vertical",
legend.background = element_blank(),
legend.key.size = unit(1.0, 'lines'),#Changing spacing between legend keys
legend.title = element_text())
set.seed(2703)
#Data:
#header info
# pending!!!!!
#values
bgc_cln0 <- read.csv("assets/data/230123_scaling_lnd_bgc.csv",
stringsAsFactors=TRUE)
bgc_cln0 <- bgc_cln0[,2:ncol(bgc_cln0)]
summary(bgc_cln0)
# Random forests filled data
rff_bgc <- filter(bgc_cln0,is.na(hz_exchng)==TRUE)
#River Corridor model generated data
rcm_bgc <- na.exclude(bgc_cln0) # a drop of 1035 additional data points.
bgc_cln <- bgc_cln0 %>%
mutate(model = ifelse(is.na(hz_exchng)==TRUE,"rff","rcm"))
glimpse(bgc_cln)
p <- ggplot(bgc_cln,aes(wsd_are,crsp_wsa, color = model))+
geom_point(alpha = 0.5)+
scale_x_log10()+
scale_y_log10()+
geom_abline(intercept = -3, slope = 1)+
facet_wrap(~model)
p
p <- ggplot(bgc_cln,aes(wsd_are,crsp_wsa, color = model))+
# geom_point(alpha = 0.5)+
geom_boxplot(alpha = 0.5)+
scale_x_log10()+
scale_y_log10()+
geom_abline(intercept = -3, slope = 1)+
facet_wrap(~model)
p
summary(filter(bgc_cln,model=="rff"))
# We have zero values for cumulative watershed respiration. Let's check how many of them we have:
length(filter(bgc_cln,crsp_wsa==0))
p <- ggplot(filter(bgc_cln,crsp_wsa>0),aes(wsd_are,crsp_wsa, color = model))+
geom_point(alpha = 0.5)+
scale_x_log10()+
scale_y_log10()+
geom_abline(intercept = -3, slope = 1)+
facet_wrap(~model)
p
load(file = "nhd_WM_streamdatabase_annual_resp_mass_01162")
dat <- load("nhd_WM_streamdatabase_annual_resp_mass_01162023.rda")
getwd()
dat <- load("assets/data/nhd_WM_streamdatabase_annual_resp_mass_01162023.rda")
dat <- load("assets\data\nhd_WM_streamdatabase_annual_resp_mass_01162023.rda")
dat <- load(file = "assets/data/nhd_WM_streamdatabase_annual_resp_mass_01162023.rda")
load("~/GitHub/scaling_watershed_function/swf-production.hub/assets/data/nhd_WM_streamdatabase_annual_resp_mass_01162023.rda")
load("Y:/RC2/RC1_model_outputs/WM/nhd_WM_streamdatabase_annual_resp_mass_01162023.rda")
sdb_dat0 <- read.csv("assets/data/nhd_WM_streamdatabase_annual_resp_mass_01162023.csv")
glimpse(sdb_dat0)
librarian::shelf(tidyr)
set.seed(2703)
#Data:
sdb_dat0 <- read.csv("assets/data/nhd_WM_streamdatabase_annual_resp_mass_01162023.csv")
glimpse(sbd_dat)
librarian::shelf(tidyr)
set.seed(2703)
#Data:
#header info
# PENDING!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#values
lgc_o <- read.csv("assets/data/220725_yrb_resp_vars_legacy.csv",stringsAsFactors = TRUE)
spt_o <- read.csv("assets/data/230110_yrb_spatial_camp.csv", stringsAsFactors = TRUE)
rsp_o <- read.csv("assets/data/230116_yrb_respt_vars.csv", stringsAsFactors = TRUE)
hbc_o <- read.csv("assets/data/230117_yrb_hbgc_vars.csv", stringsAsFactors = TRUE)
lnd_o <- read.csv("assets/data/230117_yrb_cmid_land_2011.csv",stringsAsFactors=TRUE)
lgc_m <- dplyr::select(lgc_o,COMID,
totco2g_m2_day_fill,
cum_totco2g_m2_day) %>%
rename(comid = COMID,
rsp_loc = totco2g_m2_day_fill,
rsp_acm_lg = cum_totco2g_m2_day)
librarian::shelf(tidyverse)
set.seed(2703)
lgc_m <- dplyr::select(lgc_o,COMID,
totco2g_m2_day_fill,
cum_totco2g_m2_day) %>%
rename(comid = COMID,
rsp_loc = totco2g_m2_day_fill,
rsp_acm_lg = cum_totco2g_m2_day)
glimpse(lgc_m)
glimpse(sdb_dat0)
###############################################################################
# Scaling Analysis for Respiration Rates across the Yakima River Basin
# DATA PREPARATION
###############################################################################
#By : Francisco Guerrero
#Data source: SWAT-NEXXS Model simulations (By Kyongho Son)
#Loading packages:
#Run for the first time only
#install.packages(librarian)
# To run this code in macos it is necessary to install XQuartz from
#www.xquartz.org
librarian::shelf(tidyverse)
set.seed(2703)
#Data:
# Data
sdb_dat0 <- read.csv("assets/data/nhd_WM_streamdatabase_annual_resp_mass_01162023.csv")
w_lnd <- sbd_dat0 %>% select(COMID,
urban,
forest,
wetland,
agrc,
shrub,
turban,
tforest,
twetland,
tagrc,
tshrub)
w_lnd <- sdb_dat0 %>% select(COMID,
urban,
forest,
wetland,
agrc,
shrub,
turban,
tforest,
twetland,
tagrc,
tshrub)
w_lnd <- rename(lnd,
comid = COMID,
urbn = urban,
frst = forest,
wtnd = wetland,
shrb = shrub,
urbn_t = turban,
frst_t = tforest,
wtnd_t = twetland,
agrc_t = tagrc,
shrb_t = tshrub)
w_lnd <- rename(w_lnd,
comid = COMID,
urbn = urban,
frst = forest,
wtnd = wetland,
shrb = shrub,
urbn_t = turban,
frst_t = tforest,
wtnd_t = twetland,
agrc_t = tagrc,
shrb_t = tshrub)
# Saving as csv file
write.csv(w_land,"assets/data/230126_wlm_lndu_dat.csv")
# Saving as csv file
write.csv(w_lnd,"assets/data/230126_wlm_lndu_dat.csv")
inp_dat <- read.csv("assets/data/model_resp_annual_wm_input_output_df_01_16_2023.csv")
w_rsp_dat <- read.csv("assets/data/cum_resp_WM_mass_data_0116_2023.csv")
wlm_dat0 <- merge(inp_dat,w_rsp_dat,by="COMID")
wlm_dat0 <- merge(w_rsp_dat,inp_dat,by="COMID")
wlm_dat0 <- merge(w_rsp_dat,inp_dat,by="COMID")
wlm_dat0 <- unique(merge(w_rsp_dat,inp_dat,by="COMID"))
glimpse(wlm_dat0)
bgc_cln0 <- read.csv("assets/data/230123_scaling_lnd_bgc.csv",
stringsAsFactors=TRUE)
glimpse(bgc_cln0)
glimpse(wlm_dat0)
glimpse(w_lnd)
librarian::shelf(tidyverse)
set.seed(2703)
# Data:
#values
lgc_o <- read.csv("assets/data/raw/220725_yrb_resp_vars_legacy.csv",stringsAsFactors = TRUE)
spt_o <- read.csv("assets/data/raw/230110_yrb_spatial_camp.csv", stringsAsFactors = TRUE)
rsp_o <- read.csv("assets/data/raw/230116_yrb_respt_vars.csv", stringsAsFactors = TRUE)
hbc_o <- read.csv("assets/data/raw/230117_yrb_hbgc_vars.csv", stringsAsFactors = TRUE)
yrb_lgc_o <- read.csv("assets/data/raw/220725_yrb_resp_vars_legacy.csv",
stringsAsFactors = TRUE)
yrb_spt_o <- read.csv("assets/data/raw/230110_yrb_spatial_camp.csv",
stringsAsFactors = TRUE)
yrb_rsp_o <- read.csv("assets/data/raw/230116_yrb_respt_vars.csv",
stringsAsFactors = TRUE)
yrb_hbc_o <- read.csv("assets/data/raw/230117_yrb_hbgc_vars.csv",
stringsAsFactors = TRUE)
#Willamette River Basin
wlm_rsp_o <- read.csv("assets/data/raw/cum_resp_WM_mass_data_0116_2023.csv",
stringsAsFactors = TRUE)
wlm_hbc_o <- read.csv("assets/data/raw/nhd_WM_streamdatabase_annual_resp_mass_01162023.csv",
stringsAsFactors = TRUE)
var_names <- colnames(yrb_rsp_o)
var_names
glimpse(wlm_rsp_o)
glimpse(wlm_hbc_o)
wlm_hbc_i <- read.csv("assets/data/raw/model_resp_annual_wm_input_output_df_01_16_2023",
stringsAsFactors = TRUE)
wlm_hbc_i <- read.csv("assets/data/raw/model_resp_annual_wm_input_output_df_01_16_2023.csv",
stringsAsFactors = TRUE)
glimpse(wlm_hbc_i)
wlm_rsp_i <- read.csv("assets/data/raw/model_resp_wm_rf0116.csv", stringsAsFactors = TRUE)
glimpse(wlm_hbc_o)
glimpse(wlm_hbc_i)
glimpse(wlm_rsp_o)
glimpse(wlm_rsp_i)
p <- ggplot(wlm_hbc_i,aes(TotDASqKM,logDA_km2))+
geom_point()
p
