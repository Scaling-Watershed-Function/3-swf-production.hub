ic_loc <- matrix(1:nrows,nrows,ncols,
dimnames = list(c("Agriculture","Forests","Shrublands","Urban","Wetlands"),
c("Yjn_l","Hn_l","Hmaxn_l", "In_l")))
ag_list <- list()
fr_list <- list()
sr_list <- list()
ub_list <- list()
wt_list <- list()
# Number of iterations
itn = 1000
for(i in 1:itn){
if (i == itn +1){
break
}
loc_im <- lnd_el[sample(nrow(lnd_el),size=ssz,replace = FALSE),]
iml <- loc_im[,c(2:ncol(loc_im))]/sum(loc_im[,c(2:ncol(loc_im))])
for(j in 1:ncol(iml)){
yjn = sum(iml[,j])
hn = entropy(iml[,j], unit = "log")
hmaxn = log(nrow(iml))
ic_loc[j,1]=yjn
ic_loc[j,2]=hn
ic_loc[j,3]=hmaxn
ic_loc[j,4]=yjn%*%(hmaxn-hn)
}
ag_list[[i]] <- ic_loc[1,]
fr_list[[i]] <- ic_loc[2,]
sr_list[[i]] <- ic_loc[3,]
ub_list[[i]] <- ic_loc[4,]
wt_list[[i]] <- ic_loc[5,]
}
ag_l = as_tibble(do.call("rbind",ag_list))
ag_l <- ag_l %>% mutate(use="Agriculture")
fr_l = as_tibble(do.call("rbind",fr_list))
fr_l <- fr_l %>% mutate(use = "Forests")
sr_l = as_tibble(do.call("rbind",sr_list))
sr_l <- sr_l %>% mutate(use = "Shurblands")
ub_l = as_tibble(do.call("rbind",ub_list))
ub_l <- ub_l %>% mutate(use = "Urban")
wt_l = as_tibble(do.call("rbind",wt_list))
wt_l <- wt_l %>% mutate(use = "Wetlands")
local_im <- rbind(ag_l,fr_l,sr_l,ub_l,wt_l)
p5 <- ggplot(local_im,aes(x = reorder(use,-In_l), y = In_l, fill = use, color = use))+
geom_boxplot(alpha = 0.5)+
scale_color_manual(values = my_colors)+
scale_fill_manual(values = my_colors)+
labs(x="Land use",y ="Information Contribution")+
theme(legend.position = "none")
p5
# Watershed data set
lnd_et <- select(lndf,
comid,
agrc_t,
frst_t,
shrb_t,
urbn_t,
wtnd_t)
# Creating a matrix for results
ncols = 4
nrows = 5
ssz = 600
ic_tot <- matrix(1:nrows,nrows,ncols,
dimnames = list(c("Agriculture","Forests","Shrublands","Urban","Wetlands"),
c("Yjn_l","Hn_l","Hmaxn_l", "In_l")))
agt_list <- list()
frt_list <- list()
srt_list <- list()
ubt_list <- list()
wtt_list <- list()
# Number of iterations
itn = 1000
for(i in 1:itn){
if (i == itn +1){
break
}
tot_im <- lnd_et[sample(nrow(lnd_et),size=ssz,replace = FALSE),]
imt <- tot_im[,c(2:ncol(tot_im))]/sum(tot_im[,c(2:ncol(tot_im))])
for(j in 1:ncol(imt)){
yjn = sum(imt[,j])
hn = entropy(imt[,j], unit = "log")
hmaxn = log(nrow(imt))
ic_tot[j,1]=yjn
ic_tot[j,2]=hn
ic_tot[j,3]=hmaxn
ic_tot[j,4]=yjn%*%(hmaxn-hn)
}
agt_list[[i]] <- ic_tot[1,]
frt_list[[i]] <- ic_tot[2,]
srt_list[[i]] <- ic_tot[3,]
ubt_list[[i]] <- ic_tot[4,]
wtt_list[[i]] <- ic_tot[5,]
}
agt_l = as_tibble(do.call("rbind",agt_list))
agt_l <- agt_l %>% mutate(use="Agriculture")
frt_l = as_tibble(do.call("rbind",frt_list))
frt_l <- frt_l %>% mutate(use = "Forests")
srt_l = as_tibble(do.call("rbind",srt_list))
srt_l <- srt_l %>% mutate(use = "Shurblands")
ubt_l = as_tibble(do.call("rbind",ubt_list))
ubt_l <- ubt_l %>% mutate(use = "Urban")
wtt_l = as_tibble(do.call("rbind",wtt_list))
wtt_l <- wtt_l %>% mutate(use = "Wetlands")
wshd_im <- rbind(agt_l,frt_l,srt_l,ubt_l,wtt_l)
p6 <- ggplot(wshd_im,aes(x = reorder(use,-In_l), y = In_l, fill = use, color = use))+
geom_boxplot(alpha = 0.5)+
scale_color_manual(values = my_colors)+
scale_fill_manual(values = my_colors)+
xlab("Land Use")+
ylab("Contribution to landscape heterogeneity\n(as Shannon's entropy)")+
theme(legend.position = "none")
p6
# Information content analysis suggest the percentage cover of forests, agriculture, and shrublands,
# contribute the most to the landscape heterogeneity (without accounting for spatial correlations).
# We could use the composition law (see Jaynes, 1957 -Statistical mechanics and information theory),
# to group the less informative categories (urban and wetlands) with their spatial correlates,
# (agriculture and forests, respectively)
# We will calculate the entropy over the reduced groups and merge this dataset with
# biogeochemical data
lnd_m0 <- select(lndf,
comid,
agrc,
frst,
shrb,
urbn,
wtnd,
agrc_t,
frst_t,
shrb_t,
urbn_t,
wtnd_t)
lnd_m0 <- lnd_m0 %>% group_by(comid) %>%
mutate(p_ant = agrc + urbn) %>%
mutate(p_frt = frst + wtnd) %>%
mutate(p_shb = shrb) %>%
mutate(p_ant_t = agrc_t + urbn_t) %>%
mutate(p_frt_t = frst_t + wtnd_t) %>%
mutate(p_shb_t = shrb_t)
lnd_m <- lnd_m0 %>% rowwise() %>%
mutate(hl = entropy(c(p_ant,
p_frt,
p_shb),unit = "log")) %>%
mutate(hrl = hl/log(3)) %>%
mutate(ht = entropy(c(p_ant_t,
p_frt_t,
p_shb_t),unit = "log")) %>%
mutate(hrt = ht/log(3))
#Merging landscape heterogeneity and biogeochemical data
bgc_lnd0 <- merge(lnd_m, dat_o, by = "comid") # There are duplicates comid's in both
#datasets, to filter those out:
bgc_lnd <- bgc_lnd0
#values
lgc_o <- read.csv("assets/data/220725_yrb_resp_vars_legacy.csv",stringsAsFactors = TRUE)
spt_o <- read.csv("assets/data/230110_yrb_spatial_camp.csv", stringsAsFactors = TRUE)
rsp_o <- read.csv("assets/data/230116_yrb_respt_vars.csv", stringsAsFactors = TRUE)
hbc_o <- read.csv("assets/230117_yrb_hbgc_vars.csv", stringsAsFactors = TRUE)
hbc_o <- read.csv("assets/data/230117_yrb_hbgc_vars.csv", stringsAsFactors = TRUE)
lnd_o <- read.csv("assets/data/230117_yrb_cmid_land_2011.csv",stringsAsFactors=TRUE)
lgc_m <- dplyr::select(lgc_o,COMID,
totco2g_m2_day_fill,
cum_totco2g_m2_day) %>%
rename(comid = COMID,
rsp_loc = totco2g_m2_day_fill,
rsp_acm_lg = cum_totco2g_m2_day)
glimpse(lgc_m)
# resp_o variables
rsp_m <- rename(rsp_o,
comid = COMID,
rch_lgt = CAT_STREAM_LENGTH,
rch_slp = CAT_STREAM_SLOPE,
rvr_lgt = TOT_STREAM_LENGTH,
rvr_slp = TOT_STREAM_SLOPE,
cat_are = CAT_BASIN_AREA,
wsd_are = TOT_BASIN_AREA,
rch_lgtm = stream_length_m,
rch_are = pred_stream_area_m2_fill,
clgt_rch = cum_stream_length_m,
csar_rch = cum_stream_area_m2,
crsp_mss = cum_totco2g_day,
crsp_sta = cum_totco2g_day_Tsurface_m2,
crsp_wsa = cum_totco2g_day_Tdrain_m2)
rsp_m$rch_wdt <- 10^(rsp_o$pred_logw_m) # adding a column with stream width in
# m instead of the logarithm.
# Now, let's remove the logarithmic value
rsp_m <- dplyr::select(rsp_m,-pred_logw_m)
# Now we proceed to merge:
rsp_m1 <- as_tibble(unique(merge(lgc_m,rsp_m,by = "comid")))
# Let's compare the original values of cumulative respiration per unit area of
# stream segment (used in the AGU poster) with the corrected values:
p <- ggplot(rsp_m1,aes(rsp_acm_lg, crsp_sta))+
geom_point()+
scale_x_log10()+
scale_y_log10()+
geom_abline()
p
rsp_m1 <- dplyr::select(rsp_m1,-rsp_acm_lg)
hbc_m <- dplyr::select(hbc_o,
COMID,
D50_m,
StreamOrde,
logwbkf_m,
pred_annual_DOC,
pred_annual_DO,
no3_conc_mg_l,
logRT_total_hz_s,#needs to be back transformed
logq_hz_total_m_s,#needs to be back transformed
totco2_o2g_m2_day,
totco2_ang_m2_day)
hbc_m <- rename(hbc_m,
comid = COMID,
d50m = D50_m,
order = StreamOrde,
bkf_wdt = logwbkf_m,
doc_annual = pred_annual_DOC,
do_annual = pred_annual_DO,
nitrates = no3_conc_mg_l,
res_time = logRT_total_hz_s,
hz_exchng = logq_hz_total_m_s,
aer_resp = totco2_o2g_m2_day,
anb_resp = totco2_ang_m2_day)
hbc_m$res_time <- 10^(hbc_m$res_time)
hbc_m$hz_exchng <- 10^(hbc_m$hz_exchng)
rsp_dat <- as_tibble(unique(merge(rsp_m1,hbc_m,by = "comid")))
spt_dat0 <- dplyr::select(spt_o,-totco2g_m2_day)
spt_dat0 <-  rename(spt_dat0,
comid = COMID,
prd_tot = pred_total,
rsp_locs = totco2g_m2_day_fill,
site_id = site_ID)
spt_dat <- as_tibble(unique(merge(spt_dat0,rsp_dat,by="comid")))
p <- ggplot(spt_dat,aes(wsd_are,rsp_locs))+
geom_smooth(span = 0.9)+
geom_point()+
scale_x_log10()+
scale_y_log10()
p
p
p <- ggplot(spt_dat,aes(wsd_are,rsp_locs))+
geom_smooth(span = 0.9)+
geom_point()+
scale_x_log10()+
scale_y_log10()+
geom_vline(xintercept = 500)
p
p <- ggplot(spt_dat,aes(wsd_are,rsp_locs))+
geom_smooth(span = 0.9)+
geom_point()+
scale_x_log10()+
scale_y_log10()+
geom_vline(xintercept = 350)
p
p <- ggplot(spt_dat,aes(wsd_are,rsp_locs))+
geom_smooth(span = 0.9)+
geom_point()+
scale_x_log10()+
scale_y_log10()+
geom_vline(xintercept = 300)
p
p <- ggplot(spt_dat,aes(wsd_are,rsp_locs))+
geom_smooth(span = 0.9)+
geom_point()+
scale_x_log10()+
scale_y_log10()+
geom_vline(xintercept = 325)
p
p <- ggplot(spt_dat,aes(wsd_are,rsp_locs))+
geom_smooth(span = 0.9)+
geom_point()+
scale_x_log10()+
scale_y_log10()+
geom_vline(xintercept = 325, linetype = "dashed")
p
write.csv(rsp_dat,"assets/data/230120_yrb_rsp_dat.csv",sep = '')
write.csv(rsp_dat,"assets/data/230120_yrb_spt_dat.csv")
#By : Francisco Guerrero
#Data source: Data sets generated with "script_data_preparation.R"
#Loading packages:
#Run for the first time only
#install.packages(librarian)
# To run this code in macos it is necessary to install XQuartz from
#www.xquartz.org
librarian::shelf(tidyverse,#(includes ggplot2, readr, dplyr, tidyr, and more...)
entropy)
set.seed(2703)
#Data:
dat_o <- read.csv("assets/data/230120_yrb_rsp_dat.csv",stringsAsFactors = TRUE)
lnd_o <- read.csv("assets/data/230117_yrb_cmid_land_2011.csv",stringsAsFactors=TRUE)
glimpse(dat_o)
dat <- as_tibble(dat_o)
lnd <- as_tibble(lnd_o)
my_colors <- c("#F564E3","#00BA38","#B79F00","#F8766D","#619CFF")
lnd <- rename(lnd,
comid = COMID,
urbn = urban,
frst = forest,
wtnd = wetland,
shrb = shrub,
urbn_t = turban,
frst_t = tforest,
wtnd_t = twetland,
agrc_t = tagrc,
shrb_t = tshrub)
lnd <- lnd %>% group_by(comid) %>%
mutate(tot_loc = round(urbn + frst + wtnd + agrc + shrb,2)) %>%
mutate(tot_acm = round(urbn_t + frst_t + wtnd_t + agrc_t + shrb_t,2))
summary(lnd$tot_loc)
summary(lnd$tot_acm)
lnd %>% select(tot_loc,tot_acm) %>%
gather(key = "area.type", value = "cover", c(2:3),factor_key = TRUE) %>%
ggplot(aes(area.type,cover,color = area.type))+
geom_hline(yintercept = 75)+
geom_boxplot()
lnd %>% select(comid,tot_loc,tot_acm) %>%
gather(key = "area.type", value = "cover", c(2:3),factor_key = TRUE) %>%
ggplot(aes(area.type,cover,color = area.type))+
geom_hline(yintercept = 75)+
geom_boxplot()
lndf <- filter(lnd,tot_loc > 74.99 & tot_acm >74.99) # We have dropped 806 data points (~12% of the original data set)
lndf %>% select(tot_loc,tot_acm) %>%
gather(key = "area.type", value = "cover", c(2:3),factor_key = TRUE) %>%
ggplot(aes(area.type,cover,color = area.type))+
geom_hline(yintercept = 75)+
geom_boxplot()
lndf %>% select(comid,tot_loc,tot_acm) %>%
gather(key = "area.type", value = "cover", c(2:3),factor_key = TRUE) %>%
ggplot(aes(area.type,cover,color = area.type))+
geom_hline(yintercept = 75)+
geom_boxplot()
lndf <- lndf %>%
mutate(agrc = if_else(tot_loc!=100.00,agrc*(100/tot_loc),agrc)) %>%
mutate(frst = if_else(tot_loc!=100.00,frst*(100/tot_loc),frst)) %>%
mutate(shrb = if_else(tot_loc!=100.00,shrb*(100/tot_loc),shrb)) %>%
mutate(urbn = if_else(tot_loc!=100.00,urbn*(100/tot_loc),urbn)) %>%
mutate(wtnd = if_else(tot_loc!=100.00,wtnd*(100/tot_loc),wtnd)) %>%
mutate(tot_loc = if_else(tot_loc!=100.00,agrc+frst+shrb+urbn+wtnd,tot_loc)) %>%
mutate(agrc_t = if_else(tot_acm!=100.00,agrc_t*(100/tot_acm),agrc_t)) %>%
mutate(frst_t = if_else(tot_acm!=100.00,frst_t*(100/tot_acm),frst_t)) %>%
mutate(shrb_t = if_else(tot_acm!=100.00,shrb_t*(100/tot_acm),shrb_t)) %>%
mutate(urbn_t = if_else(tot_acm!=100.00,urbn_t*(100/tot_acm),urbn_t)) %>%
mutate(wtnd_t = if_else(tot_acm!=100.00,wtnd_t*(100/tot_acm),wtnd_t)) %>%
mutate(tot_acm = if_else(tot_acm!=100.00,agrc_t+frst_t+shrb_t+urbn_t+wtnd_t,tot_acm))
# Making row-wise operations (https://dplyr.tidyverse.org/articles/rowwise.html)
lndf <- lndf %>% rowwise() %>%
mutate(hl = entropy(c(agrc,
frst,
shrb,
urbn,
wtnd),unit = "log")) %>%
mutate(hrl = hl/log(5)) %>%
mutate(ht = entropy(c(agrc_t,
frst_t,
shrb_t,
urbn_t,
wtnd_t),unit = "log")) %>%
mutate(hrt = ht/log(5))
p4 <- ggplot(lndf,aes(hrl,hrt))+
geom_point()
p4
# Local dataset
lnd_el <- select(lndf,
comid,
agrc,
frst,
shrb,
urbn,
wtnd)
ncols = 4
nrows = 5
ssz = 600
ic_loc <- matrix(1:nrows,nrows,ncols,
dimnames = list(c("Agriculture","Forests","Shrublands","Urban","Wetlands"),
c("Yjn_l","Hn_l","Hmaxn_l", "In_l")))
ag_list <- list()
fr_list <- list()
sr_list <- list()
ub_list <- list()
wt_list <- list()
# Number of iterations
itn = 1000
for(i in 1:itn){
if (i == itn +1){
break
}
loc_im <- lnd_el[sample(nrow(lnd_el),size=ssz,replace = FALSE),]
iml <- loc_im[,c(2:ncol(loc_im))]/sum(loc_im[,c(2:ncol(loc_im))])
for(j in 1:ncol(iml)){
yjn = sum(iml[,j])
hn = entropy(iml[,j], unit = "log")
hmaxn = log(nrow(iml))
ic_loc[j,1]=yjn
ic_loc[j,2]=hn
ic_loc[j,3]=hmaxn
ic_loc[j,4]=yjn%*%(hmaxn-hn)
}
ag_list[[i]] <- ic_loc[1,]
fr_list[[i]] <- ic_loc[2,]
sr_list[[i]] <- ic_loc[3,]
ub_list[[i]] <- ic_loc[4,]
wt_list[[i]] <- ic_loc[5,]
}
ag_l = as_tibble(do.call("rbind",ag_list))
ag_l <- ag_l %>% mutate(use="Agriculture")
fr_l = as_tibble(do.call("rbind",fr_list))
fr_l <- fr_l %>% mutate(use = "Forests")
sr_l = as_tibble(do.call("rbind",sr_list))
sr_l <- sr_l %>% mutate(use = "Shurblands")
ub_l = as_tibble(do.call("rbind",ub_list))
ub_l <- ub_l %>% mutate(use = "Urban")
wt_l = as_tibble(do.call("rbind",wt_list))
wt_l <- wt_l %>% mutate(use = "Wetlands")
local_im <- rbind(ag_l,fr_l,sr_l,ub_l,wt_l)
# Let's check the results with a box-plot
p5 <- ggplot(local_im,aes(x = reorder(use,-In_l), y = In_l, fill = use, color = use))+
geom_boxplot(alpha = 0.5)+
scale_color_manual(values = my_colors)+
scale_fill_manual(values = my_colors)+
labs(x="Land use",y ="Information Contribution")+
theme(legend.position = "none")
p5
# Watershed Scale
# Watershed data set
lnd_et <- select(lndf,
comid,
agrc_t,
frst_t,
shrb_t,
urbn_t,
wtnd_t)
# Creating a matrix for results
ncols = 4
nrows = 5
ssz = 600
ic_tot <- matrix(1:nrows,nrows,ncols,
dimnames = list(c("Agriculture","Forests","Shrublands","Urban","Wetlands"),
c("Yjn_l","Hn_l","Hmaxn_l", "In_l")))
agt_list <- list()
frt_list <- list()
srt_list <- list()
ubt_list <- list()
wtt_list <- list()
# Number of iterations
itn = 1000
for(i in 1:itn){
if (i == itn +1){
break
}
tot_im <- lnd_et[sample(nrow(lnd_et),size=ssz,replace = FALSE),]
imt <- tot_im[,c(2:ncol(tot_im))]/sum(tot_im[,c(2:ncol(tot_im))])
for(j in 1:ncol(imt)){
yjn = sum(imt[,j])
hn = entropy(imt[,j], unit = "log")
hmaxn = log(nrow(imt))
ic_tot[j,1]=yjn
ic_tot[j,2]=hn
ic_tot[j,3]=hmaxn
ic_tot[j,4]=yjn%*%(hmaxn-hn)
}
agt_list[[i]] <- ic_tot[1,]
frt_list[[i]] <- ic_tot[2,]
srt_list[[i]] <- ic_tot[3,]
ubt_list[[i]] <- ic_tot[4,]
wtt_list[[i]] <- ic_tot[5,]
}
agt_l = as_tibble(do.call("rbind",agt_list))
agt_l <- agt_l %>% mutate(use="Agriculture")
frt_l = as_tibble(do.call("rbind",frt_list))
frt_l <- frt_l %>% mutate(use = "Forests")
srt_l = as_tibble(do.call("rbind",srt_list))
srt_l <- srt_l %>% mutate(use = "Shurblands")
ubt_l = as_tibble(do.call("rbind",ubt_list))
ubt_l <- ubt_l %>% mutate(use = "Urban")
wtt_l = as_tibble(do.call("rbind",wtt_list))
wtt_l <- wtt_l %>% mutate(use = "Wetlands")
wshd_im <- rbind(agt_l,frt_l,srt_l,ubt_l,wtt_l)
p6 <- ggplot(wshd_im,aes(x = reorder(use,-In_l), y = In_l, fill = use, color = use))+
geom_boxplot(alpha = 0.5)+
scale_color_manual(values = my_colors)+
scale_fill_manual(values = my_colors)+
xlab("Land Use")+
ylab("Contribution to landscape heterogeneity\n(as Shannon's entropy)")+
theme(legend.position = "none")
p6
lnd_m0 <- select(lndf,
comid,
agrc,
frst,
shrb,
urbn,
wtnd,
agrc_t,
frst_t,
shrb_t,
urbn_t,
wtnd_t)
lnd_m0 <- lnd_m0 %>% group_by(comid) %>%
mutate(p_ant = agrc + urbn) %>%
mutate(p_frt = frst + wtnd) %>%
mutate(p_shb = shrb) %>%
mutate(p_ant_t = agrc_t + urbn_t) %>%
mutate(p_frt_t = frst_t + wtnd_t) %>%
mutate(p_shb_t = shrb_t)
lnd_m <- lnd_m0 %>% rowwise() %>%
mutate(hl = entropy(c(p_ant,
p_frt,
p_shb),unit = "log")) %>%
mutate(hrl = hl/log(3)) %>%
mutate(ht = entropy(c(p_ant_t,
p_frt_t,
p_shb_t),unit = "log")) %>%
mutate(hrt = ht/log(3))
bgc_lnd0 <- merge(lnd_m, dat_o, by = "comid") # There are duplicates comid's in both
#datasets, to filter those out:
bgc_lnd <- bgc_lnd0
